# -*- coding: utf-8 -*-
"""Image Segmentation for Medical Imaging using U-Net.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

# unet_segmentation.py

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

def generate_dummy_data(img_size=128, num_samples=100):
    X = np.random.rand(num_samples, img_size, img_size, 1)
    y = (X > 0.5).astype(np.float32)  # Dummy binary masks
    return train_test_split(X, y, test_size=0.2, random_state=42)

def build_unet(input_shape):
    inputs = tf.keras.Input(shape=input_shape)

    # Encoder
    c1 = layers.Conv2D(16, 3, activation='relu', padding='same')(inputs)
    c1 = layers.Conv2D(16, 3, activation='relu', padding='same')(c1)
    p1 = layers.MaxPooling2D()(c1)

    c2 = layers.Conv2D(32, 3, activation='relu', padding='same')(p1)
    c2 = layers.Conv2D(32, 3, activation='relu', padding='same')(c2)
    p2 = layers.MaxPooling2D()(c2)

    c3 = layers.Conv2D(64, 3, activation='relu', padding='same')(p2)
    c3 = layers.Conv2D(64, 3, activation='relu', padding='same')(c3)

    # Decoder
    u1 = layers.UpSampling2D()(c3)
    u1 = layers.concatenate([u1, c2])
    c4 = layers.Conv2D(32, 3, activation='relu', padding='same')(u1)
    c4 = layers.Conv2D(32, 3, activation='relu', padding='same')(c4)

    u2 = layers.UpSampling2D()(c4)
    u2 = layers.concatenate([u2, c1])
    c5 = layers.Conv2D(16, 3, activation='relu', padding='same')(u2)
    c5 = layers.Conv2D(16, 3, activation='relu', padding='same')(c5)

    outputs = layers.Conv2D(1, 1, activation='sigmoid')(c5)

    model = models.Model(inputs, outputs)
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

def plot_sample(X, y_true, y_pred, index=0):
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 3, 1)
    plt.imshow(X[index].squeeze(), cmap='gray')
    plt.title("Input Image")
    plt.subplot(1, 3, 2)
    plt.imshow(y_true[index].squeeze(), cmap='gray')
    plt.title("True Mask")
    plt.subplot(1, 3, 3)
    plt.imshow(y_pred[index].squeeze(), cmap='gray')
    plt.title("Predicted Mask")
    plt.show()

def main():
    X_train, X_test, y_train, y_test = generate_dummy_data()
    model = build_unet(input_shape=X_train.shape[1:])
    model.fit(X_train, y_train, epochs=5, batch_size=8, validation_split=0.1)

    preds = model.predict(X_test)
    plot_sample(X_test, y_test, preds)

if __name__ == "__main__":
    main()